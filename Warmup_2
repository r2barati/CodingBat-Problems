# ----------------------------- 1
# String_match

def string_match(a, b):
  shorter = min(len(a), len(b))
  count = 0
  for i in range(shorter-1):
    a_sub = a[i:i+2]
    b_sub = b[i:i+2]
    if a_sub == b_sub:
      count = count + 1
  return count

#------------------------------ 2
# array_123

def array123(nums):
  for i in range(len(nums)-2):
    if nums[i] == 1 and nums[i+1] == 2 and nums[i+2] == 3:
      return True
  return False

# ----------------------------- 3
# array_front9

def array_front9(nums):
  return 9 in nums[:3]
  
# ----------------------------- 4
# array_count9

def array_count9(nums):
  count = 0
  # Standard loop to look at each value
  for num in nums:
    if num == 9:
      count = count + 1
  return count

# ----------------------------- 5
# last_2

def last2(str):
  if len(str) < 2:
    return 0
    last2 = str[len(str)-2:]
  count = 0
    for i in range(len(str)-2):
    sub = str[i:i+2]
    if sub == last2:
      count = count + 1
  return count
  
# ------------------------------ 6
# string_splosion

def string_splosion(str):
  str2 = ''
  for i in range(len(str)):
    str2 = str2 + str[:i+1]
  return str2
  
#------------------------------- 7
# String_bits

def string_bits(str):
  result = ""
  # Many ways to do this. This uses the standard loop of i on every char,
  # and inside the loop skips the odd index values.
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result

# ------------------------------- 8
# front_times

def front_times(str, n):
  front_len = 3
  if front_len > len(str):
    front_len = len(str)
  front = str[:front_len]
  result = ""
  for i in range(n):
    result = result + front
  return result

# ------------------------------- 9
# string_times

def string_times(str, n):
  result = ""
  for i in range(n):  # range(n) is [0, 1, 2, .... n-1]
    result = result + str  # could use += here
  return result
